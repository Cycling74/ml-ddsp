#pragma once

// @generated by tools/codegen/gen.py from Function.h

#include <ATen/Context.h>
#include <ATen/DeviceGuard.h>
#include <ATen/TensorUtils.h>
#include <ATen/TracerMode.h>
#include <ATen/core/Generator.h>
#include <ATen/core/Reduction.h>
#include <ATen/core/Tensor.h>
#include <c10/core/Scalar.h>
#include <c10/core/Storage.h>
#include <c10/core/TensorOptions.h>
#include <c10/util/Deprecated.h>
#include <c10/util/Optional.h>



#include <ATen/ops/celu_ops.h>

namespace at {


// aten::celu(Tensor self, Scalar alpha=1.0) -> Tensor
TORCH_API inline at::Tensor celu(const at::Tensor & self, const at::Scalar & alpha=1.0) {
    return at::_ops::celu::call(self, alpha);
}

// aten::celu_(Tensor(a!) self, Scalar alpha=1.0) -> Tensor(a!)
TORCH_API inline at::Tensor & celu_(at::Tensor & self, const at::Scalar & alpha=1.0) {
    return at::_ops::celu_::call(self, alpha);
}

}
